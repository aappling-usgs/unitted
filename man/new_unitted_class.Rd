% Generated by roxygen2 (4.0.1): do not edit by hand
\name{new_unitted_class}
\alias{new_unitted_class}
\title{Define a custom subclass of \code{unitted}}
\usage{
new_unitted_class(superclass.name, overwrite = FALSE)
}
\arguments{
\item{superclass.name}{The character name of the S4 class that will form the
core of the new unitted class. The new class will have the name
"unitted_[superclass.name]".}

\item{overwrite}{Logical. If TRUE, the new setClass call will be executed
even if the same superclass.name has already been defined during this
session.}
}
\description{
There is already a unitted class defined for each of the basic classes
(numeric, logical, character, ...), many of the most common S3 data
structures (factor, Date, POSIXct), and both lists and data.frames. And for
the most part, only the numeric types will make sense as unitted types.
However, there may still be cases where you need yet another class for yet
another data type. \code{new_unitted_class} helps you define such a class.
}
\details{
Your new class will have to be S4; I have found no way to circumvent this
requirement. However, a close S4 counterpart can be constructed for nearly
any S3 class. See the examples.

Your new class should also have a .Data part to it, because only those
computations that apply to the .Data part will affect and be affected by the
units. The default behavior of unitted subclasses expects a single unitbundle
in the units slot, which means a single set of units per object. Data.frames
and lists are the notable exceptions.

It is also important to distinguish between S3/S4 classes and S3/S4 methods.
Even though you must use an S4 class, you may use any combination of S3 and
S4 methods; all of these will be correctly dispatched on objects inheriting
from the unitted class, providing that you define your classes correctly and
that the dispatch behavior you want is within the abilities of the particular
dispatch system (S3 or s4).
}
\examples{
## S4 ##

# "myS4flower": An S4 class to be made unitted
setClass("myS4flower", contains="numeric", slots=c(leaves="numeric", petals="numeric", color="character"))

# Define the unitted version of myS4flower
new_unitted_class("myS4flower")

# Try out the new unitted_myS4flower class
petunia <- new("unitted_myS4flower", c(frontyard=7, backyard=3, planters=12), leaves=4, petals=5, color="purple", units="stems ft^-2")
petunia * u(1/2,"blooming")

## S3 ##

# "quote": An S3 class to be made unitted
two_cities <- c("It was the best of times, it was the worst of times, ",
                "it was the age of wisdom, it was the age of foolishness, ",
                "it was the epoch of belief, it was the epoch of incredulity, ",
                "it was the season of Light, it was the season of Darkness, ",
                "it was the spring of hope, it was the winter of despair...")
class(two_cities) <- "quote"
attr(two_cities, "author") <- "Charles Dickens"
print.quote <- function(x) { cat(paste(paste(x, collapse="\\n"),"\\n   - ",attr(x,"author"))) }
print(two_cities)

# Now make it unittable
setClass("quote", contains="character", slots=c(author="character"))

# And now make it unitted
new_unitted_class("quote", overwrite=TRUE)
two_cities_unitted <- new("unitted_quote", two_cities, author=attr(two_cities, "author"), units="lines")
see_spot_run_unitted <- new("unitted_quote", c("Here is Spot.","See Spot run.","Run, Spot, Run!"), author="unknown", units="sentences")
print(two_cities_unitted)
print(see_spot_run_unitted)
sum(!is.na(see_spot_run_unitted))
}

