% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/arithmetic.R
\docType{methods}
\name{Ops,unitted,unitted-method}
\alias{Ops}
\alias{Ops,ANY,unitted-method}
\alias{Ops,array,unitted-method}
\alias{Ops,data.frame,unitted-method}
\alias{Ops,unitted,ANY-method}
\alias{Ops,unitted,array-method}
\alias{Ops,unitted,data.frame-method}
\alias{Ops,unitted,unitted-method}
\alias{Ops.unitted}
\alias{unitted_Ops}
\alias{unitted_Ops,ANY-method}
\title{Operations on unitbundles}
\usage{
\S4method{Ops}{unitted,unitted}(e1, e2)

\S4method{Ops}{unitted,ANY}(e1, e2)

\S4method{Ops}{ANY,unitted}(e1, e2)

\S4method{Ops}{unitted,data.frame}(e1, e2)

\S4method{Ops}{data.frame,unitted}(e1, e2)

\S4method{Ops}{unitted,array}(e1, e2)

\S4method{Ops}{array,unitted}(e1, e2)

\method{Ops}{unitted}(e1, e2)

unitted_Ops(.Generic, e1, e2)

\S4method{unitted_Ops}{ANY}(.Generic, e1, e2)
}
\arguments{
\item{e1}{The first argument to a binary arithmetical operation, or the only
argument to a unary operation}

\item{e2}{The second argument to a binary arithmetical operation}

\item{.Generic}{A generic function name, as for Ops.unitted and the S4 generic Ops}
}
\description{
When data with units are combined by arithmetic, comparative, or logical
operations, the units ought to be propagated through according to standard
rules. Data that are \code{unitted} obey these rules because the methods that
handle operations on unitted objects are specially designed to do so.

To ensure that unit checking happens in as many arithmetic operations as
possible, even with funny combinations of unitted and non-unitted objects,
both S3 and S4 group generics are implemented for the unitted class.

\code{unitted_Ops} works behind the scenes to ensure that operations on
unitted objects respect their units.
}
\seealso{
\code{\link{unitbundle}} for the \code{unitbundle} class;
  \code{\linkS4class{unitted}} for data with unitbundles attached
}

